@EnableAutoConfiguration: 
	- Allows configuration classes to be scanned Automatically
	- Auto configurations can be controlled by @AutoConfigureBefore and @AutoConfigureAfter

Conditional Loading
	- @ConditionalOnClass
	- @ConditionalOnBean
	- @ConditionalOnProperty
	- @ConditionalOnMissingBean
	
Properties
	- @EnableConfigurationProperties
	- Can be always be overridden

Configuring Spring
	- Property Based Configurations (application.properties or application.yml)
	- Environment Variables
	- Command-line injections
	- Cloud Configurations (config server, vault, consul)
	- Bean Configuration
		- adding bean to the default application class
		- adding bean to separate configuration classes	
		- importing XML-based configuration
		- component scanning
		

---

Embedded Tomcat
Slf4J is default logger which comes with spring-boot-starter-web
Also logback and JBoss loggin

Spring MVC
SnakeYAML
Validators (javax and hibernate)

 
 
------
Full list of the embedded server properties can be found at below location
org.springframework.boot.autoconfigure.web.ServerProperties


----
Compression
	- server.compressoin.enabled=true
	- Response must be 2048 bytes to compress by default
	- Default response types of text/html, text/xml, text/plain, text/css will be compressed by default
	
---
TLS/SSL
	- Native SSL support via property management
	- Generate keystore in resource/ folder.
		keytool -genkey -keyalg RSA -alias linkedin -keystore keystore.jks -storepass mypassword -validity 4000 -keysize 2048
	- Below are the properties to enable SSL with above generated keystore
		server.ssl.key-store: classpath:keystore.jks
		server.ssl.key-store-password: password
		server.ssl.key-store-type: JKS
		server.ssl.key-alias: linkedin
		server.ssl.key-password: password
		
---
DevTools
	- Allows reloading the application context while the application is running
	- Triggered from classpath changes
	
---
Spring Boot JAR features
	- Default behavior is jar packaging
	- Produces a "Fat Jar" means it contains all the dependent jars
	- Executable
	- Registrable with systemd or init.d which makes it suitable for cloud
	

---
CommandLineRunner Interface
	- Provides access to application arguments
	- Runs a simple (or complex) set of tasks
	- Can be used standalone or with a running application
	- Implement a single run method

ApplicationRunner Interface
	- Works the exact same way as CommanLineRunner
	- Simple-run method
	- Access to application arguments


-----

DevTools:
	- This dependency allows a fast springboot development
	- It automatically reload the application when there is a file changed in the classpath
	- DevTools provides Two ClassLoader
		- Base Class Loader: To load the jar or classes which don't change.
		- Re-start class loader: To load the application classes..i.e. when there is a change in the application, restart class loader loads the new changed classes.
		
	- Static resources like (html, css etc.) don't need a restart. Because DevTools create sensible caching.
	- If pom.xml changes, then manual restart of the app is required.
	
---

Actuator
	
	Web Functionalities
	--------------------
	 	Health Endpoint
	 		- Provides status of application
	 		- Provides status of dependencies
	 	Info Endpoint
	 		- Provides customizable point of information
 		
 	JMX Functionalites
 	---------------
	 	Beans - Provides list of the all the beans in the current environment
	 	Env -  Provides the listing of the state of the environment
	 	Heapdump/threaddump - Provide memory dumps
	 	Mappings - List of web URL mappings
	 	Metrics - Mircometer metrics (Customizable n default value)
 	
 Define Exposures
 	management.endpoints.jmx.exposure.exclude/include
 	management.endpoints.web.exposure.exclude/include
 	management.endpoint.<id>.enabled
 
 Securing Actuator
 	 	
 		
